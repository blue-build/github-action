name: 'BlueBuild'
description: 'Build a custom OS image'
inputs:
  recipe:
    description: |
      The [recipe](https://blue-build.org/reference/recipe/) file to build the image from, relative to the `config/` directory.
    required: true
    default: 'recipe.yml'
  cosign_private_key:
    description: |
      The Sigstore/cosign secret used to sign the image.

      Example: `&#36;{{ secrets.SIGNING_SECRET }}`
    required: true
  registry_token:
    description: | 
      The token used to sign into the container registry.

      Example: `&#36;{{ github.token }}`
    required: true
  pr_event_number:
    description: |
      The event number used to tag images pushed from pull requests.

      Example: `&#36;{{ github.event.number }}`
    required: true
  maximize_build_space:
    description: |
      Whether to run the unwanted software remover to maximize build space in the GitHub builder.
      Use this if your builds are taking too much space.
      Input must match the string 'true' for the step to be enabled.
    required: false
    default: 'false'
  use_unstable_cli:
    description: |
      If true, this action pulls the `main` branch of blue-build/cli instead of the stable version the current action version is configured to use by default. 
      This feature is useful for testing new features, but should not be used in production.
      Input must match the string 'true' for the unstable version to be used.
    required: false
    default: 'false'
  registry:
    description: |
      The container registry to push the built image to.
    required: false
    default: 'ghcr.io'
  registry_namespace:
    description: |
     The namespace on the registry to push to.
     
     Example: `ublue-os`
    required: false
    default: ${{ github.repository_owner }}
  use_cache:
    description: |
      Make use of docker buildx cache. This is an experimental feature of docker buildx
      so it isn't guaranteed to work.
      Input must match the string 'true' for the step to be enabled.
    required: false
    default: 'true'
  squash:
    description: |
      Uses buildah to squash the build's layers into a single layer. Use of this option
      disables cache.
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    # building custom images might take a lot of space, 
    # so it's best to remove unneeded softawre
    - name: Maximize build space
      uses: jlumbroso/free-disk-space@v1.3.1
      if: ${{ inputs.maximize_build_space == 'true' }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      if: ${{ inputs.squash != 'true' }}
      with:
        install: true
        driver: docker-container
        cache-binary: ${{ inputs.use_cache }}

    # clones user's repo
    - uses: actions/checkout@v4

    - name: Determine Vars
      id: build_vars
      shell: bash
      env:
        RECIPE: ${{ inputs.recipe }}
      run: |
        if [[ "${{ inputs.use_unstable_cli }}" == "true" ]]; then
          CLI_VERSION_TAG="main"
        else
          CLI_VERSION_TAG="v0.8.5"
        fi
        echo "cli_version=${CLI_VERSION_TAG}" >> ${GITHUB_OUTPUT}

        RECIPE_PATH=""
        if [ -f "./config/${RECIPE}" ]; then
          RECIPE_PATH="./config/${RECIPE}"
        else
          RECIPE_PATH="./recipes/${RECIPE}"
        fi
        echo "recipe_path=${RECIPE_PATH}" >> ${GITHUB_OUTPUT}

    - name: Install BlueBuild
      shell: bash
      if: ${{ inputs.squash != 'true' }}
      env:
        CLI_VERSION_TAG: ${{ steps.build_vars.outputs.cli_version }}
      run: |
        docker run \
          --detach \
          --rm \
          --name blue-build-installer \
          ghcr.io/blue-build/cli:${{ env.CLI_VERSION_TAG }}-installer \
          tail -f /dev/null
        docker cp blue-build-installer:/out/bluebuild /usr/local/bin/bluebuild
        docker stop -t 0 blue-build-installer

    - uses: sigstore/cosign-installer@v3.5.0
      if: ${{ inputs.squash != 'true' }}

    # Required in order for docker buildx to
    # take advantage of the GHA cache API
    - name: Expose GitHub Runtime
      if: ${{ inputs.use_cache == 'true' && inputs.squash != 'true' }}
      uses: crazy-max/ghaction-github-runtime@v3


    # blue-build/cli does the heavy lifting
    - name: Build Image
      shell: bash
      if: ${{ inputs.squash != 'true' }}
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign_private_key }}
        GH_TOKEN: ${{ inputs.registry_token }}
        GH_PR_EVENT_NUMBER: ${{ inputs.pr_event_number }}
        BB_BUILDKIT_CACHE_GHA: ${{ inputs.use_cache }}
        RECIPE_PATH: ${{ steps.build_vars.outputs.recipe_path }}
      run: |
        bluebuild build -v --push ${RECIPE_PATH} \
          --registry ${{inputs.registry}} \
          --registry-namespace ${{inputs.registry_namespace}}

    - name: Build Squashed Image
      shell: bash
      if: ${{ inputs.squash == 'true' }}
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign_private_key }}
        GH_TOKEN: ${{ inputs.registry_token }}
        GH_PR_EVENT_NUMBER: ${{ inputs.pr_event_number }}
        CLI_VERSION_TAG: ${{ steps.build_vars.outputs.cli_version }}
        RECIPE_PATH: ${{ steps.build_vars.outputs.recipe_path }}
      run: |
        podman run \
          -v buildah-imagestores:/usr/lib/containers/storage \
          -v buildah-graphroot:/var/lib/containers/storage \
          -v buildah-runroot:/run/containers/storage \
          -v $PWD:/bluebuild \
          --env-host \
          --network=host \
          --privileged \
          --device /dev/fuse \
          ghcr.io/blue-build/cli:${CLI_VERSION_TAG}-alpine \
          build -v -B buildah --squash --push ${RECIPE_PATH} \
          --registry ${{inputs.registry}} \
          --registry-namespace ${{inputs.registry_namespace}}
